import { useState, useCallback, useRef, useEffect } from "react";
import { useChatbotContext } from "../contexts/ChatbotContext";

interface AIMessage {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  suggestedMatch?: {
    id: string;
    name: string;
    type: "koc" | "business";
    matchScore: number;
    reasons: string[];
  };
}

interface InfluencerData {
  influId: string;
  userId: string;
  name: string;
  gender: number;
  nickName: string;
  dateOfBirth: string;
  phoneNumber: string;
  area: string;
  follower: number;
  bio: string;
  cccd: string;
  linkImage: string;
  portfolio_link: string;
  fieldNames?: string[]; // Will be fetched separately
}

interface BusinessData {
  id: string;
  userId: string;
  name: string;
  description: string;
  address: string;
  businessLicense: string;
  logo: string;
  fieldName?: string; // Will be fetched separately
}

interface JobData {
  id: string;
  title: string;
  location: string;
  budget: number;
  fieldName: string;
  require: string;
  follower: number;
}

export const useAIChat = () => {
  const [messages, setMessages] = useState<AIMessage[]>(() => {
    try {
      const stored = localStorage.getItem("ai_chat_messages");
      if (stored) {
        const parsed: AIMessage[] = JSON.parse(stored);
        return parsed.map((m) => ({ ...m, timestamp: new Date(m.timestamp) }));
      }
    } catch (parseError: unknown) {
      console.warn("Failed to parse stored chat messages", parseError);
    }
    return [];
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { currentUserType } = useChatbotContext();
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Persist messages to localStorage
  useEffect(() => {
    try {
      localStorage.setItem("ai_chat_messages", JSON.stringify(messages));
    } catch {
      /* ignore quota errors */
    }
  }, [messages]);

  // Scroll to bottom when new message added
  const scrollToBottom = useCallback(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, []);

  // Create prompts based on user type and context
  const createKOCPrompt = useCallback(
    (
      influencersData: InfluencerData[],
      jobsData: JobData[],
      userMessage: string
    ) => {
      return `B·∫°n l√† AI Assistant chuy√™n nghi·ªáp d√†nh cho KOL/KOC tr√™n n·ªÅn t·∫£ng k·∫øt n·ªëi influencer marketing.

üéØ NHI·ªÜM V·ª§ C·ª¶A B·∫†N:
- T∆∞ v·∫•n s·ª± nghi·ªáp v√† ph√°t tri·ªÉn th∆∞∆°ng hi·ªáu c√° nh√¢n cho KOL/KOC
- G·ª£i √Ω c√¥ng vi·ªác ph√π h·ª£p t·ª´ database c√≥ s·∫µn
- ƒê∆∞a ra l·ªùi khuy√™n ƒë·ªÉ tƒÉng c∆° h·ªôi ƒë∆∞·ª£c tuy·ªÉn ch·ªçn
- H∆∞·ªõng d·∫´n v·ªÅ xu h∆∞·ªõng content v√† marketing

üë§ ƒê·ªêI T∆Ø·ª¢NG: KOL/KOC (Key Opinion Leader/Consumer)

üíº DANH S√ÅCH C√îNG VI·ªÜC C√ì S·∫¥N:
${JSON.stringify(jobsData.slice(0, 8), null, 2)}

üîç KHI N√ÄO G·ª¢I √ù C√îNG VI·ªÜC:
-LU√îN g·ª£i √Ω c√¥ng vi·ªác khi user h·ªèi v·ªÅ:
+CH·ªà g·ª£i √Ω c√¥ng vi·ªác N·∫æU user R√ï R√ÄNG y√™u c·∫ßu t√¨m ki·∫øm c√¥ng vi·ªác ph√π h·ª£p ho·∫∑c h·ªèi v·ªÅ:
- "t√¨m vi·ªác", "c√¥ng vi·ªác ph√π h·ª£p", "job matching", "vi·ªác l√†m"
- "m·ª©c l∆∞∆°ng", "thu nh·∫≠p", "ng√¢n s√°ch", "income"
- "lƒ©nh v·ª±c chuy√™n m√¥n", "kinh nghi·ªám", "expertise"
- "follower", "audience", "ƒë·ªô tu·ªïi", "target"
- "c∆° h·ªôi", "opportunity", "career"
- "d·ª± √°n", "project", "campaign"
- "h·ª£p t√°c", "collaboration", "partnership"

üìä TI√äU CH√ç MATCHING CHI TI·∫æT:
1. Follower requirement: Job follower ‚â§ KOC followers
2. Lƒ©nh v·ª±c ph√π h·ª£p: Job fieldName match v·ªõi KOC expertise  
3. Ng√¢n s√°ch h·ª£p l√Ω: Job budget ph√π h·ª£p v·ªõi level KOC
4. Khu v·ª±c ƒë·ªãa l√Ω: Job location g·∫ßn KOC area
5. Th·ªùi gian ph√π h·ª£p: Job timeline reasonable
6. Status: Ch·ªâ g·ª£i √Ω job c√≥ status = 0 (Available)

üí∞ C√îNG TH·ª®C MATCH SCORE:
- Perfect match (t·∫•t c·∫£ ti√™u ch√≠): 85-95%
- Good match (4/6 ti√™u ch√≠): 70-84%
- Fair match (3/6 ti√™u ch√≠): 55-69%
- Poor match (‚â§2/6 ti√™u ch√≠): 40-54%

üéØ ƒê·∫∂C BI·ªÜT: ∆Øu ti√™n g·ª£i √Ω job c√≥:
- Budget cao nh·∫•t trong kh·∫£ nƒÉng c·ªßa KOC
- FieldName match v·ªõi KOC expertise
- Follower requirement ph√π h·ª£p
- Status = 0 (ƒëang tuy·ªÉn)

üö® QUY T·∫ÆC OUTPUT QUAN TR·ªåNG:
Ch·ªâ khi b·∫°n quy·∫øt ƒë·ªãnh G·ª¢I √ù m·ªôt c√¥ng vi·ªác th√¨ m·ªõi th√™m block sau v√†o cu·ªëi ph·∫£n h·ªìi, n·∫øu kh√¥ng th√¨ k·∫øt th√∫c b√¨nh th∆∞·ªùng m√† KH√îNG c√≥ block n√†y:

JOB_ID: [id t·ª´ data]
JOB_TITLE: [title t·ª´ data]
MATCH_SCORE: [s·ªë t·ª´ 40-95]

V√ç D·ª§:
JOB_ID: job_123456
JOB_TITLE: Content Creator cho th∆∞∆°ng hi·ªáu th·ªùi trang
MATCH_SCORE: 87

üí¨ C√¢u h·ªèi t·ª´ KOL/KOC: "${userMessage}"

H√£y ph√¢n t√≠ch profile KOC v√† G·ª¢I √ù M·ªòT C√îNG VI·ªÜC C·ª§ TH·ªÇ t·ª´ danh s√°ch tr√™n v·ªõi l√Ω do chi ti·∫øt.`;
    },
    []
  );

  const createBusinessPrompt = useCallback(
    (
      influencersData: InfluencerData[],
      businessData: BusinessData[],
      userMessage: string
    ) => {
      return `B·∫°n l√† AI Marketing Consultant chuy√™n nghi·ªáp cho doanh nghi·ªáp t√¨m ki·∫øm KOL/KOC.

üè¢ NHI·ªÜM V·ª§ C·ª¶A B·∫†N:
- T∆∞ v·∫•n chi·∫øn l∆∞·ª£c influencer marketing
- G·ª£i √Ω KOL/KOC ph√π h·ª£p t·ª´ database c√≥ s·∫µn
- D·ª± ƒëo√°n ROI v√† hi·ªáu qu·∫£ campaign
- T·ªëi ∆∞u h√≥a ng√¢n s√°ch marketing

üéØ ƒê·ªêI T∆Ø·ª¢NG: Doanh nghi·ªáp/Brand Manager

üë• DANH S√ÅCH KOL/KOC C√ì S·∫¥N:
${JSON.stringify(influencersData.slice(0, 8), null, 2)}

üîç KHI N√ÄO G·ª¢I √ù KOL/KOC:
-LU√îN g·ª£i √Ω KOL/KOC khi user h·ªèi v·ªÅ:
+CH·ªà g·ª£i √Ω KOL/KOC N·∫æU doanh nghi·ªáp R√ï R√ÄNG y√™u c·∫ßu t√¨m ki·∫øm KOL/KOC ph√π h·ª£p ho·∫∑c h·ªèi v·ªÅ:
- "t√¨m KOL", "t√¨m influencer", "g·ª£i √Ω KOC", "recommend KOL"
- "target audience", "nh√≥m kh√°ch h√†ng m·ª•c ti√™u"
- "ng√¢n s√°ch campaign", "chi ph√≠ marketing"
- "engagement rate", "hi·ªáu qu·∫£ qu·∫£ng c√°o"
- "lƒ©nh v·ª±c", "chuy√™n m√¥n", "niche market"
- "khu v·ª±c", "ƒë·ªãa ƒëi·ªÉm", "location"
- "followers", "ng∆∞·ªùi theo d√µi"
- "ph√π h·ª£p v·ªõi th∆∞∆°ng hi·ªáu", "matching brand"

üìà TI√äU CH√ç ƒê√ÅNH GI√Å KOL/KOC:
1. S·ªë l∆∞·ª£ng follower ph√π h·ª£p v·ªõi ng√¢n s√°ch
2. Lƒ©nh v·ª±c chuy√™n m√¥n match v·ªõi s·∫£n ph·∫©m/d·ªãch v·ª•
3. Khu v·ª±c ƒë·ªãa l√Ω ph√π h·ª£p v·ªõi th·ªã tr∆∞·ªùng
4. T·ª∑ l·ªá engagement rate ∆∞·ªõc t√≠nh
5. ƒê·ªô tin c·∫≠y v√† ch·∫•t l∆∞·ª£ng content
6. Cost per engagement h·ª£p l√Ω

üí∞ C√îNG TH·ª®C ƒê√ÅNH GI√Å:
- Micro KOC (1K-10K followers): Match Score 70-85%
- Mid-tier KOC (10K-100K followers): Match Score 60-80% 
- Macro KOL (100K+ followers): Match Score 50-75%

üéØ ƒê·∫∂C BI·ªÜT: H√£y ∆∞u ti√™n g·ª£i √Ω KOL/KOC c√≥:
- Lƒ©nh v·ª±c fieldNames ph√π h·ª£p v·ªõi y√™u c·∫ßu
- Follower count ph√π h·ª£p v·ªõi ng√¢n s√°ch d·ª± ki·∫øn
- Khu v·ª±c area ph√π h·ª£p v·ªõi target market

üö® QUY T·∫ÆC OUTPUT QUAN TR·ªåNG:
Ch·ªâ khi b·∫°n quy·∫øt ƒë·ªãnh G·ª¢I √ù m·ªôt KOL/KOC th√¨ m·ªõi th√™m block sau v√†o cu·ªëi ph·∫£n h·ªìi, n·∫øu kh√¥ng th√¨ k·∫øt th√∫c b√¨nh th∆∞·ªùng m√† KH√îNG c√≥ block n√†y:

KOC_ID: [userId t·ª´ data]
KOC_NAME: [name t·ª´ data]  
MATCH_SCORE: [s·ªë t·ª´ 50-95]
ROI_PREDICTION: [%]

V√ç D·ª§:
KOC_ID: user_123456
KOC_NAME: Nguy·ªÖn VƒÉn A
MATCH_SCORE: 87
ROI_PREDICTION: 250%

üí¨ Y√™u c·∫ßu t·ª´ doanh nghi·ªáp: "${userMessage}"

H√£y ph√¢n t√≠ch y√™u c·∫ßu v√† G·ª¢I √ù M·ªòT KOL/KOC C·ª§ TH·ªÇ t·ª´ danh s√°ch tr√™n v·ªõi l√Ω do chi ti·∫øt.`;
    },
    []
  );

  // Process AI response ƒë·ªÉ extract suggestions
  const processAIResponse = useCallback(
    (responseText: string, userType: "koc" | "business") => {
      const cleanedText = responseText
        .replace(/JOB_ID:.*?\n/gi, "")
        .replace(/JOB_TITLE:.*?\n/gi, "")
        .replace(/KOC_ID:.*?\n/gi, "")
        .replace(/KOC_NAME:.*?\n/gi, "")
        .replace(/MATCH_SCORE:.*?\n/gi, "")
        .replace(/ROI_PREDICTION:.*?\n/gi, "")
        .replace(/\*\*([^*]+)\*\*/g, "$1")
        .trim();

      let suggestedMatch = null;

      if (userType === "koc") {
        const jobIdMatch = responseText.match(/JOB_ID:\s*([^\n]+)/i);
        const jobTitleMatch = responseText.match(/JOB_TITLE:\s*([^\n]+)/i);
        const matchScoreMatch = responseText.match(/MATCH_SCORE:\s*(\d+)/i);

        if (jobIdMatch && jobTitleMatch) {
          // Clean job ID by removing any extra text after the actual ID
          const cleanJobId = jobIdMatch[1]
            .trim()
            .replace(/[^a-zA-Z0-9-].*$/, "");
          const cleanJobTitle = jobTitleMatch[1].trim().replace(/[)].*$/, "");

          suggestedMatch = {
            id: cleanJobId,
            name: cleanJobTitle,
            type: "business" as const,
            matchScore: matchScoreMatch ? parseInt(matchScoreMatch[1]) : 0,
            reasons: [
              "Ph√π h·ª£p v·ªõi chuy√™n m√¥n",
              "Ng√¢n s√°ch h·ª£p l√Ω",
              "Y√™u c·∫ßu ph√π h·ª£p",
            ],
          };
        }
      } else if (userType === "business") {
        const kocIdMatch = responseText.match(/KOC_ID:\s*([^\n]+)/i);
        const kocNameMatch = responseText.match(/KOC_NAME:\s*([^\n]+)/i);
        const matchScoreMatch = responseText.match(/MATCH_SCORE:\s*(\d+)/i);

        if (kocIdMatch && kocNameMatch) {
          // Clean KOC ID by removing any extra text after the actual ID
          const cleanKocId = kocIdMatch[1]
            .trim()
            .replace(/[^a-zA-Z0-9-].*$/, "");
          const cleanKocName = kocNameMatch[1].trim().replace(/[)].*$/, "");

          suggestedMatch = {
            id: cleanKocId,
            name: cleanKocName,
            type: "koc" as const,
            matchScore: matchScoreMatch ? parseInt(matchScoreMatch[1]) : 0,
            reasons: [
              "Audience ph√π h·ª£p",
              "Engagement rate cao",
              "Kinh nghi·ªám t·ªët",
            ],
          };
        }
      }

      return { cleanedText, suggestedMatch };
    },
    []
  );

  // Fetch data for AI analysis
  const fetchDataForAI = useCallback(async () => {
    try {
      const apiBaseUrl =
        import.meta.env.VITE_API_BASE_URL ||
        "https://influencerhub1-g8dshgbwhgb9djfd.southeastasia-01.azurewebsites.net/api";

      const [influencersRes, jobsRes, businessRes] = await Promise.all([
        fetch(`${apiBaseUrl}/influ/all`),
        fetch(`${apiBaseUrl}/jobs/get-all`),
        fetch(`${apiBaseUrl}/business/all`),
      ]);

      const influencersData = await influencersRes.json();
      const jobsData = await jobsRes.json();
      const businessData = await businessRes.json();

      // Process influencers data - add field information
      const processedInfluencers = Array.isArray(influencersData.data)
        ? await Promise.all(
            influencersData.data
              .slice(0, 10)
              .map(async (influ: InfluencerData) => {
                let fieldNames: string[] = [];
                try {
                  const fieldRes = await fetch(
                    `${apiBaseUrl}/field/get-all-field-of-influ/${influ.influId}`
                  );
                  const fieldJson = await fieldRes.json();
                  if (fieldJson.isSuccess && Array.isArray(fieldJson.data)) {
                    fieldNames = fieldJson.data
                      // eslint-disable-next-line @typescript-eslint/no-explicit-any
                      .filter((f: any) => f.name && f.name.trim() !== "")
                      .map((f: any) => f.name.trim());
                  }
                } catch (error) {
                  console.error(
                    `Error fetching fields for influencer ${influ.influId}:`,
                    error
                  );
                }

                return { ...influ, fieldNames };
              })
          )
        : [];

      return {
        influencers: processedInfluencers,
        jobs: Array.isArray(jobsData.data) ? jobsData.data.slice(0, 10) : [],
        businesses: Array.isArray(businessData.data)
          ? businessData.data.slice(0, 10)
          : [],
      };
    } catch (error) {
      console.error("Error fetching data for AI:", error);
      return { influencers: [], jobs: [], businesses: [] };
    }
  }, []);

  // Fetch current logged-in user's profile for personalization
  const fetchCurrentUserProfile = useCallback(async () => {
    try {
      const userId = localStorage.getItem("userId");
      const role =
        localStorage.getItem("role") || localStorage.getItem("userRole");
      const token = localStorage.getItem("accessToken");
      const apiBase =
        "https://influencerhub1-g8dshgbwhgb9djfd.southeastasia-01.azurewebsites.net/api";
      if (!userId || !role) return null;

      if (role === "Business" || role === "business") {
        const res = await fetch(
          `${apiBase}/business/get-business-by-user-id/${userId}`,
          {
            headers: token ? { Authorization: `Bearer ${token}` } : {},
          }
        );
        const json = await res.json();
        if (json.isSuccess) return { type: "business", data: json.data };
      } else if (role === "Freelancer" || role === "influencer") {
        const res = await fetch(
          `${apiBase}/influ/get-influ-by-userId/${userId}`,
          {
            headers: token ? { Authorization: `Bearer ${token}` } : {},
          }
        );
        const json = await res.json();
        if (json.isSuccess) return { type: "koc", data: json.data };
      }
    } catch (err) {
      console.warn("Could not fetch current user profile", err);
    }
    return null;
  }, []);

  // Helper to check if the user message explicitly requests a match suggestion
  const isMatchRequest = (
    userType: "koc" | "business",
    msg: string
  ): boolean => {
    const text = msg.toLowerCase();
    if (userType === "koc") {
      return /\b(t√¨m|job|vi·ªác|c√¥ng vi·ªác|apply|·ª©ng tuy·ªÉn|match)\b/.test(text);
    }
    // business
    return /\b(kol|koc|influencer|t√¨m|g·ª£i √Ω|ph√π h·ª£p|recommend|influ)\b/.test(
      text
    );
  };

  // Main function to send message to AI
  const sendMessage = useCallback(
    async (userMessage: string) => {
      if (!userMessage.trim() || !currentUserType) return;

      setIsLoading(true);
      setError(null);

      // Add user message
      const userMsgId = Date.now().toString();
      setMessages((prev) => [
        ...prev,
        {
          id: userMsgId,
          text: userMessage,
          isUser: true,
          timestamp: new Date(),
        },
      ]);

      try {
        // Fetch data for AI analysis
        const { influencers, jobs, businesses } = await fetchDataForAI();
        const currentProfile = await fetchCurrentUserProfile();

        // Create appropriate prompt based on user type
        let prompt = "";
        if (currentUserType === "koc") {
          prompt = createKOCPrompt(influencers, jobs, userMessage);
        } else if (currentUserType === "business") {
          prompt = createBusinessPrompt(influencers, businesses, userMessage);
        }

        // Call AI via proxy server
        const aiProxyUrl =
          import.meta.env.VITE_AI_PROXY_URL ||
          "http://localhost:3001/api/ai-proxy";

        // Get AI configuration from environment
        const response = await fetch(aiProxyUrl, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [
              {
                parts: [{ text: prompt }],
              },
            ],
            generationConfig: {
              temperature: parseFloat(
                import.meta.env.VITE_AI_TEMPERATURE || "0.7"
              ),
              maxOutputTokens: parseInt(
                import.meta.env.VITE_AI_MAX_TOKENS || "1000"
              ),
            },
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(
            errorData.error?.message || `HTTP ${response.status}`
          );
        }

        const data = await response.json();
        const aiResponseText =
          data.candidates?.[0]?.content?.parts?.[0]?.text ||
          "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi l√∫c n√†y.";

        // Process response and extract suggestions
        let cleanedText = aiResponseText;
        let suggestedMatch = null;

        if (currentUserType === "koc" || currentUserType === "business") {
          const result = processAIResponse(aiResponseText, currentUserType);
          cleanedText = result.cleanedText;
          suggestedMatch = result.suggestedMatch;

          // Filter suggestedMatch if the user didn't explicitly request matching
          if (!isMatchRequest(currentUserType, userMessage)) {
            suggestedMatch = null;
          }
        }

        // Add AI response
        const aiMsgId = (Date.now() + 1).toString();
        setMessages((prev) => [
          ...prev,
          {
            id: aiMsgId,
            text: cleanedText as string,
            isUser: false,
            timestamp: new Date(),
            suggestedMatch: suggestedMatch || undefined,
          },
        ]);

        setTimeout(scrollToBottom, 100);
      } catch (err: unknown) {
        console.error("AI Chat Error:", err);

        let errorMessage = "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.";
        if (
          (err instanceof Error && err.message.includes("network")) ||
          err instanceof TypeError
        ) {
          errorMessage = "L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra internet.";
        } else if (err instanceof Error && err.message.includes("401")) {
          errorMessage = "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
        }

        setError(errorMessage);

        // Add error message
        const errorMsgId = (Date.now() + 1).toString();
        setMessages((prev) => [
          ...prev,
          {
            id: errorMsgId,
            text: errorMessage,
            isUser: false,
            timestamp: new Date(),
          },
        ]);
      } finally {
        setIsLoading(false);
      }
    },
    [
      currentUserType,
      createKOCPrompt,
      createBusinessPrompt,
      processAIResponse,
      fetchDataForAI,
      scrollToBottom,
    ]
  );

  // Clear conversation
  const clearMessages = useCallback(() => {
    setMessages([]);
    setError(null);
    try {
      localStorage.removeItem("ai_chat_messages");
    } catch {
      /* ignore remove errors */
    }
  }, []);

  // Initialize with welcome message
  const initializeChat = useCallback(() => {
    if (messages.length === 0 && currentUserType) {
      const welcomeText =
        currentUserType === "koc"
          ? "üëã Ch√†o b·∫°n! T√¥i l√† AI Assistant, s·∫µn s√†ng gi√∫p b·∫°n t√¨m ki·∫øm c√¥ng vi·ªác ph√π h·ª£p v√† ph√°t tri·ªÉn s·ª± nghi·ªáp KOL/KOC. H√£y cho t√¥i bi·∫øt b·∫°n ƒëang t√¨m ki·∫øm g√¨?"
          : "üëã Ch√†o b·∫°n! T√¥i l√† AI Assistant, chuy√™n t∆∞ v·∫•n influencer marketing. T√¥i s·∫Ω gi√∫p b·∫°n t√¨m ki·∫øm KOL/KOC ph√π h·ª£p v√† t·ªëi ∆∞u h√≥a chi·∫øn l∆∞·ª£c marketing. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?";

      setMessages([
        {
          id: "welcome",
          text: welcomeText,
          isUser: false,
          timestamp: new Date(),
        },
      ]);
    }
  }, [messages.length, currentUserType]);

  return {
    messages,
    isLoading,
    error,
    sendMessage,
    clearMessages,
    initializeChat,
    messagesEndRef,
  };
};
